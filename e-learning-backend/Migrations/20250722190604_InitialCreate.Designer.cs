// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using e_learning_backend.Infrastructure.Persistence.DatabaseContexts;

#nullable disable

namespace e_learning_backend.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20250722190604_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BlockedUsers", b =>
                {
                    b.Property<Guid>("BlockingUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BlockedUserId")
                        .HasColumnType("uuid");

                    b.HasKey("BlockingUserId", "BlockedUserId");

                    b.HasIndex("BlockedUserId");

                    b.ToTable("BlockedUsers");

                    b.HasData(
                        new
                        {
                            BlockingUserId = new Guid("11111111-1111-1111-1111-111111111111"),
                            BlockedUserId = new Guid("22222222-2222-2222-2222-222222222222")
                        });
                });

            modelBuilder.Entity("ClassFileResources", b =>
                {
                    b.Property<Guid>("ClassId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FileResourceId")
                        .HasColumnType("uuid");

                    b.HasKey("ClassId", "FileResourceId");

                    b.HasIndex("FileResourceId");

                    b.ToTable("ClassFileResources");

                    b.HasData(
                        new
                        {
                            ClassId = new Guid("43333333-3333-3333-3333-333333333333"),
                            FileResourceId = new Guid("ff555555-5555-5555-5555-555555555555")
                        });
                });

            modelBuilder.Entity("QuestionAnswers", b =>
                {
                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AnswerId")
                        .HasColumnType("uuid");

                    b.HasKey("QuestionId", "AnswerId");

                    b.HasIndex("AnswerId");

                    b.ToTable("QuestionAnswers");

                    b.HasData(
                        new
                        {
                            QuestionId = new Guid("10000000-0000-0000-0002-000000000001"),
                            AnswerId = new Guid("20000000-0033-0000-0000-000000000001")
                        },
                        new
                        {
                            QuestionId = new Guid("10000000-0000-0000-0002-000000000001"),
                            AnswerId = new Guid("20000000-0033-0000-0000-000000000002")
                        });
                });

            modelBuilder.Entity("QuestionCategoryAssignments", b =>
                {
                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("QuestionCategoryId")
                        .HasColumnType("uuid");

                    b.HasKey("QuestionId", "QuestionCategoryId");

                    b.HasIndex("QuestionCategoryId");

                    b.ToTable("QuestionCategoryAssignments");

                    b.HasData(
                        new
                        {
                            QuestionId = new Guid("10000000-0000-0000-0002-000000000001"),
                            QuestionCategoryId = new Guid("30000000-0000-0000-0000-000000000001")
                        });
                });

            modelBuilder.Entity("QuizQuestions", b =>
                {
                    b.Property<Guid>("QuizId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.HasKey("QuizId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuizQuestions");

                    b.HasData(
                        new
                        {
                            QuizId = new Guid("40000000-0000-0000-0000-000000000001"),
                            QuestionId = new Guid("10000000-0000-0000-0002-000000000001")
                        });
                });

            modelBuilder.Entity("TagFile", b =>
                {
                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FileResourceId")
                        .HasColumnType("uuid");

                    b.HasKey("TagId", "FileResourceId");

                    b.HasIndex("FileResourceId");

                    b.ToTable("TagFiles", (string)null);

                    b.HasData(
                        new
                        {
                            TagId = new Guid("aaaaaaa1-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            FileResourceId = new Guid("ff555555-5555-5555-5555-555555555555")
                        });
                });

            modelBuilder.Entity("UserSpectators", b =>
                {
                    b.Property<Guid>("SpectatedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SpectatorUserId")
                        .HasColumnType("uuid");

                    b.HasKey("SpectatedUserId", "SpectatorUserId");

                    b.HasIndex("SpectatorUserId");

                    b.ToTable("UserSpectators", (string)null);

                    b.HasData(
                        new
                        {
                            SpectatedUserId = new Guid("11111111-1111-1111-1111-111111111111"),
                            SpectatorUserId = new Guid("44444444-4444-4444-4444-444444444444")
                        });
                });

            modelBuilder.Entity("e_learning_backend.Domain.Classes.Class", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClassStatusId")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<string>("LinkToMeeting")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ClassStatusId");

                    b.HasIndex("UserId", "CourseId");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("43333333-3333-3333-3333-333333333333"),
                            ClassStatusId = new Guid("41111111-1111-1111-1111-111111111111"),
                            Comment = "Introductory session",
                            CourseId = new Guid("0042b980-d8cc-4969-af0f-62d8c1632871"),
                            LinkToMeeting = "https://example.com/meeting",
                            StartTime = new DateTime(2025, 5, 8, 19, 24, 25, 619, DateTimeKind.Utc),
                            UserId = new Guid("22222222-2222-2222-2222-222222222222")
                        });
                });

            modelBuilder.Entity("e_learning_backend.Domain.Classes.ValueObjects.ClassStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ClassStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("41111111-1111-1111-1111-111111111111"),
                            Status = "Scheduled"
                        },
                        new
                        {
                            Id = new Guid("42222222-2222-2222-2222-222222222222"),
                            Status = "Done"
                        });
                });

            modelBuilder.Entity("e_learning_backend.Domain.Courses.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0042b980-d8cc-4969-af0f-62d8c1632871"),
                            CategoryId = new Guid("92625ae5-da0e-48ce-ac3f-79f9be35caa4"),
                            Description = "Learn the basics of C# programming.",
                            Name = "C# Basics",
                            TeacherId = new Guid("11111111-1111-1111-1111-111111111111")
                        });
                });

            modelBuilder.Entity("e_learning_backend.Domain.Courses.CourseCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CourseCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("92625ae5-da0e-48ce-ac3f-79f9be35caa4"),
                            Name = "Programming"
                        });
                });

            modelBuilder.Entity("e_learning_backend.Domain.Courses.CourseLanguage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CourseLanguages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3e118082-c17c-4a4c-945a-1a88733c2e28"),
                            Name = "English"
                        });
                });

            modelBuilder.Entity("e_learning_backend.Domain.Courses.CourseLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CourseLevels");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1dcb1002-ec77-49ea-8f21-56e0caac0824"),
                            Name = "Beginner"
                        });
                });

            modelBuilder.Entity("e_learning_backend.Domain.Courses.CourseVariant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseLanguageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseLevelId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CourseLanguageId");

                    b.HasIndex("CourseLevelId");

                    b.ToTable("CourseVariants");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4f0da3ec-6a56-4705-b691-8890b67d24b1"),
                            CourseId = new Guid("0042b980-d8cc-4969-af0f-62d8c1632871"),
                            CourseLanguageId = new Guid("3e118082-c17c-4a4c-945a-1a88733c2e28"),
                            CourseLevelId = new Guid("1dcb1002-ec77-49ea-8f21-56e0caac0824")
                        });
                });

            modelBuilder.Entity("e_learning_backend.Domain.ExercisesAndMaterials.Exercise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<double?>("Grade")
                        .HasPrecision(3, 2)
                        .HasColumnType("double precision");

                    b.Property<string>("Instruction")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("Exercises");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ee111111-1111-1111-1111-111111111111"),
                            ClassId = new Guid("43333333-3333-3333-3333-333333333333"),
                            Comment = "Good job on the assignment!",
                            Grade = 4.5,
                            Instruction = "Complete the assignment on OOP concepts.",
                            Status = "Graded"
                        });
                });

            modelBuilder.Entity("e_learning_backend.Domain.ExercisesAndMaterials.ExerciseResource", b =>
                {
                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ExerciseId", "FileId");

                    b.HasIndex("FileId");

                    b.ToTable("ExerciseResources");

                    b.HasData(
                        new
                        {
                            ExerciseId = new Guid("ee111111-1111-1111-1111-111111111111"),
                            FileId = new Guid("ff555555-5555-5555-5555-555555555555"),
                            Type = "Content"
                        });
                });

            modelBuilder.Entity("e_learning_backend.Domain.ExercisesAndMaterials.FileResource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("FileResources");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ff555555-5555-5555-5555-555555555555"),
                            AddedAt = new DateTime(2025, 7, 11, 10, 0, 0, 0, DateTimeKind.Utc),
                            Name = "example.pdf",
                            Path = "/uploads/example.pdf",
                            UserId = new Guid("11111111-1111-1111-1111-111111111111")
                        });
                });

            modelBuilder.Entity("e_learning_backend.Domain.ExercisesAndMaterials.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaa1-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Name = "Matematyka",
                            TeacherId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("aaaaaaa2-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Name = "Fizyka",
                            TeacherId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("aaaaaaa3-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Name = "Chemia"
                        });
                });

            modelBuilder.Entity("e_learning_backend.Domain.Participations.Participation", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Notifications")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ReviewId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "CourseId");

                    b.HasIndex("CourseId");

                    b.HasIndex("ReviewId")
                        .IsUnique();

                    b.ToTable("Participations");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("22222222-2222-2222-2222-222222222222"),
                            CourseId = new Guid("0042b980-d8cc-4969-af0f-62d8c1632871"),
                            Notifications = false
                        },
                        new
                        {
                            UserId = new Guid("33333333-3333-3333-3333-333333333333"),
                            CourseId = new Guid("0042b980-d8cc-4969-af0f-62d8c1632871"),
                            Notifications = true
                        });
                });

            modelBuilder.Entity("e_learning_backend.Domain.Participations.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("StarsNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            Content = "Świetny kurs!",
                            StarsNumber = 5
                        });
                });

            modelBuilder.Entity("e_learning_backend.Domain.Quizzes.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("20000000-0033-0000-0000-000000000001"),
                            Content = "4",
                            IsCorrect = true
                        },
                        new
                        {
                            Id = new Guid("20000000-0033-0000-0000-000000000002"),
                            Content = "5",
                            IsCorrect = false
                        });
                });

            modelBuilder.Entity("e_learning_backend.Domain.Quizzes.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0002-000000000001"),
                            Content = "What is 2 + 2?"
                        });
                });

            modelBuilder.Entity("e_learning_backend.Domain.Quizzes.QuestionCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("QuestionCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000001"),
                            Description = "Basic math questions",
                            Name = "Math",
                            TeacherId = new Guid("11111111-1111-1111-1111-111111111111")
                        });
                });

            modelBuilder.Entity("e_learning_backend.Domain.Quizzes.Quiz", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uuid");

                    b.Property<bool>("MultipleChoice")
                        .HasColumnType("boolean");

                    b.Property<double?>("Score")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("Quizzes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000001"),
                            ClassId = new Guid("43333333-3333-3333-3333-333333333333"),
                            MultipleChoice = true
                        });
                });

            modelBuilder.Entity("e_learning_backend.Domain.Quizzes.TeacherQuestionAccess", b =>
                {
                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Created")
                        .HasColumnType("boolean");

                    b.HasKey("TeacherId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("TeacherQuestionAccesses");

                    b.HasData(
                        new
                        {
                            TeacherId = new Guid("11111111-1111-1111-1111-111111111111"),
                            QuestionId = new Guid("10000000-0000-0000-0002-000000000001"),
                            Created = true
                        });
                });

            modelBuilder.Entity("e_learning_backend.Domain.Users.Availability", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Availabilities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f1111111-1111-1111-1111-111111111111"),
                            Date = new DateTime(2025, 7, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            TeacherId = new Guid("11111111-1111-1111-1111-111111111111")
                        });
                });

            modelBuilder.Entity("e_learning_backend.Domain.Users.TimeSlot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AvailabilityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilityId");

                    b.ToTable("TimeSlots");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f2222222-2222-2222-2222-222222222222"),
                            AvailabilityId = new Guid("f1111111-1111-1111-1111-111111111111"),
                            EndTime = new DateTime(2025, 7, 15, 10, 0, 0, 0, DateTimeKind.Utc),
                            StartTime = new DateTime(2025, 7, 15, 9, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("f3333333-3333-3333-3333-333333333333"),
                            AvailabilityId = new Guid("f1111111-1111-1111-1111-111111111111"),
                            EndTime = new DateTime(2025, 7, 15, 11, 0, 0, 0, DateTimeKind.Utc),
                            StartTime = new DateTime(2025, 7, 15, 10, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("e_learning_backend.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AboutMe")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            AboutMe = "Passionate about teaching mathematics.",
                            Email = "alice.johnson@example.com",
                            HashedPassword = "$2a$12$abcdefghijklmnopqrstuu4CCWBIT4hflhcfUk9bNoatbvS5.d4pe",
                            Name = "Alice",
                            Phone = "+1-202-555-0101",
                            Surname = "Johnson"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Email = "john.doe@example.com",
                            HashedPassword = "$2a$12$abcdefghijklmnopqrstuujMFUXAM4k/lY17vfDwnx7yNLJqx5wXW",
                            Name = "John",
                            Phone = "+1-202-555-0102",
                            Surname = "Doe"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            Email = "jane.doe@example.com",
                            HashedPassword = "$2a$12$abcdefghijklmnopqrstuuKbr1cYNTcpTfIrQbyKoc7w9QqzPY9QC",
                            Name = "Jane",
                            Phone = "+1-202-555-0103",
                            Surname = "Doe"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            AboutMe = "Enjoys following courses as a spectator.",
                            Email = "michael.brown@example.com",
                            HashedPassword = "$2a$12$abcdefghijklmnopqrstuuQWvbKyvRYSwa0yXIU1Metx2nqgPWowS",
                            Name = "Michael",
                            Phone = "+1-202-555-0104",
                            Surname = "Brown"
                        });
                });

            modelBuilder.Entity("BlockedUsers", b =>
                {
                    b.HasOne("e_learning_backend.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("BlockedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("e_learning_backend.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("BlockingUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ClassFileResources", b =>
                {
                    b.HasOne("e_learning_backend.Domain.Classes.Class", null)
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e_learning_backend.Domain.ExercisesAndMaterials.FileResource", null)
                        .WithMany()
                        .HasForeignKey("FileResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuestionAnswers", b =>
                {
                    b.HasOne("e_learning_backend.Domain.Quizzes.Answer", null)
                        .WithMany()
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e_learning_backend.Domain.Quizzes.Question", null)
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuestionCategoryAssignments", b =>
                {
                    b.HasOne("e_learning_backend.Domain.Quizzes.QuestionCategory", null)
                        .WithMany()
                        .HasForeignKey("QuestionCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e_learning_backend.Domain.Quizzes.Question", null)
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuizQuestions", b =>
                {
                    b.HasOne("e_learning_backend.Domain.Quizzes.Question", null)
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e_learning_backend.Domain.Quizzes.Quiz", null)
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TagFile", b =>
                {
                    b.HasOne("e_learning_backend.Domain.ExercisesAndMaterials.FileResource", null)
                        .WithMany()
                        .HasForeignKey("FileResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e_learning_backend.Domain.ExercisesAndMaterials.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserSpectators", b =>
                {
                    b.HasOne("e_learning_backend.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("SpectatedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("e_learning_backend.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("SpectatorUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("e_learning_backend.Domain.Classes.Class", b =>
                {
                    b.HasOne("e_learning_backend.Domain.Classes.ValueObjects.ClassStatus", "Status")
                        .WithMany()
                        .HasForeignKey("ClassStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e_learning_backend.Domain.Participations.Participation", "Participation")
                        .WithMany("Classes")
                        .HasForeignKey("UserId", "CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participation");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("e_learning_backend.Domain.Courses.Course", b =>
                {
                    b.HasOne("e_learning_backend.Domain.Courses.CourseCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e_learning_backend.Domain.Users.User", "Teacher")
                        .WithMany("ConductedCourses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("e_learning_backend.Domain.Courses.CourseVariant", b =>
                {
                    b.HasOne("e_learning_backend.Domain.Courses.Course", null)
                        .WithMany("Variants")
                        .HasForeignKey("CourseId");

                    b.HasOne("e_learning_backend.Domain.Courses.CourseLanguage", "Language")
                        .WithMany()
                        .HasForeignKey("CourseLanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e_learning_backend.Domain.Courses.CourseLevel", "Level")
                        .WithMany()
                        .HasForeignKey("CourseLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("e_learning_backend.Domain.Courses.ValueObjects.CourseRate", "Rate", b1 =>
                        {
                            b1.Property<Guid>("CourseVariantId")
                                .HasColumnType("uuid");

                            b1.HasKey("CourseVariantId");

                            b1.ToTable("CourseVariants");

                            b1.WithOwner()
                                .HasForeignKey("CourseVariantId");
                        });

                    b.Navigation("Language");

                    b.Navigation("Level");

                    b.Navigation("Rate")
                        .IsRequired();
                });

            modelBuilder.Entity("e_learning_backend.Domain.ExercisesAndMaterials.Exercise", b =>
                {
                    b.HasOne("e_learning_backend.Domain.Classes.Class", "Class")
                        .WithMany("Exercises")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("e_learning_backend.Domain.ExercisesAndMaterials.ExerciseResource", b =>
                {
                    b.HasOne("e_learning_backend.Domain.ExercisesAndMaterials.Exercise", "Exercise")
                        .WithMany("ExerciseResources")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e_learning_backend.Domain.ExercisesAndMaterials.FileResource", "File")
                        .WithMany("ExerciseResources")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("File");
                });

            modelBuilder.Entity("e_learning_backend.Domain.ExercisesAndMaterials.FileResource", b =>
                {
                    b.HasOne("e_learning_backend.Domain.Users.User", "User")
                        .WithMany("Files")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("e_learning_backend.Domain.ExercisesAndMaterials.Tag", b =>
                {
                    b.HasOne("e_learning_backend.Domain.Users.User", "Teacher")
                        .WithMany("Tags")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("e_learning_backend.Domain.Participations.Participation", b =>
                {
                    b.HasOne("e_learning_backend.Domain.Courses.Course", "Course")
                        .WithMany("Participations")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e_learning_backend.Domain.Participations.Review", "Review")
                        .WithOne("Participation")
                        .HasForeignKey("e_learning_backend.Domain.Participations.Participation", "ReviewId");

                    b.HasOne("e_learning_backend.Domain.Users.User", "User")
                        .WithMany("Participations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Review");

                    b.Navigation("User");
                });

            modelBuilder.Entity("e_learning_backend.Domain.Quizzes.QuestionCategory", b =>
                {
                    b.HasOne("e_learning_backend.Domain.Users.User", "Teacher")
                        .WithMany("QuestionCategories")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("e_learning_backend.Domain.Quizzes.Quiz", b =>
                {
                    b.HasOne("e_learning_backend.Domain.Classes.Class", "Class")
                        .WithMany("Quizzes")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("e_learning_backend.Domain.Quizzes.TeacherQuestionAccess", b =>
                {
                    b.HasOne("e_learning_backend.Domain.Quizzes.Question", "Question")
                        .WithMany("Accesses")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e_learning_backend.Domain.Users.User", "Teacher")
                        .WithMany("TeacherQuestionAccesses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("e_learning_backend.Domain.Users.Availability", b =>
                {
                    b.HasOne("e_learning_backend.Domain.Users.User", "Teacher")
                        .WithMany("Availability")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("e_learning_backend.Domain.Users.TimeSlot", b =>
                {
                    b.HasOne("e_learning_backend.Domain.Users.Availability", "Availability")
                        .WithMany("TimeSlots")
                        .HasForeignKey("AvailabilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Availability");
                });

            modelBuilder.Entity("e_learning_backend.Domain.Users.User", b =>
                {
                    b.OwnsMany("e_learning_backend.Domain.Users.ValueObjects.Role", "Roles", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("RoleName")
                                .HasColumnType("text")
                                .HasColumnName("RoleName");

                            b1.HasKey("UserId", "RoleName");

                            b1.ToTable("UserRoles", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.HasData(
                                new
                                {
                                    UserId = new Guid("11111111-1111-1111-1111-111111111111"),
                                    RoleName = "teacher"
                                },
                                new
                                {
                                    UserId = new Guid("22222222-2222-2222-2222-222222222222"),
                                    RoleName = "student"
                                },
                                new
                                {
                                    UserId = new Guid("33333333-3333-3333-3333-333333333333"),
                                    RoleName = "student"
                                },
                                new
                                {
                                    UserId = new Guid("44444444-4444-4444-4444-444444444444"),
                                    RoleName = "student"
                                },
                                new
                                {
                                    UserId = new Guid("44444444-4444-4444-4444-444444444444"),
                                    RoleName = "spectator"
                                });
                        });

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("e_learning_backend.Domain.Classes.Class", b =>
                {
                    b.Navigation("Exercises");

                    b.Navigation("Quizzes");
                });

            modelBuilder.Entity("e_learning_backend.Domain.Courses.Course", b =>
                {
                    b.Navigation("Participations");

                    b.Navigation("Variants");
                });

            modelBuilder.Entity("e_learning_backend.Domain.ExercisesAndMaterials.Exercise", b =>
                {
                    b.Navigation("ExerciseResources");
                });

            modelBuilder.Entity("e_learning_backend.Domain.ExercisesAndMaterials.FileResource", b =>
                {
                    b.Navigation("ExerciseResources");
                });

            modelBuilder.Entity("e_learning_backend.Domain.Participations.Participation", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("e_learning_backend.Domain.Participations.Review", b =>
                {
                    b.Navigation("Participation")
                        .IsRequired();
                });

            modelBuilder.Entity("e_learning_backend.Domain.Quizzes.Question", b =>
                {
                    b.Navigation("Accesses");
                });

            modelBuilder.Entity("e_learning_backend.Domain.Users.Availability", b =>
                {
                    b.Navigation("TimeSlots");
                });

            modelBuilder.Entity("e_learning_backend.Domain.Users.User", b =>
                {
                    b.Navigation("Availability");

                    b.Navigation("ConductedCourses");

                    b.Navigation("Files");

                    b.Navigation("Participations");

                    b.Navigation("QuestionCategories");

                    b.Navigation("Tags");

                    b.Navigation("TeacherQuestionAccesses");
                });
#pragma warning restore 612, 618
        }
    }
}
